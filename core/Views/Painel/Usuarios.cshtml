<style> 
    input.form-control.form-control-sm {
        width: 100% !important;
        display: block;
    } 

    select.custom-select.custom-select-sm.form-control.form-control-sm {
        grid-row: 2;
        max-width: 200px;
    }

    .custom-switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 28px;
    }

        .custom-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute; 
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    } 
     
    input:disabled + .slider {
        cursor: default;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 22px;
            width: 22px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

    input:checked + .slider {
        background-color: #28a745; /* Cor verde para o estado "Ativo" */
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #28a745;
    }

    input:checked + .slider:before {
        transform: translateX(22px);
    }

    /* Adiciona o texto "Ativo" ou "Inativo" ao lado do switch */
    .switch-label {
        margin-left: 10px;
        font-weight: bold;
        color: #555;
    }

        .switch-label.active {
            color: #28a745;
        }

        .switch-label.inactive {
            color: #ccc;
        }

    #usuarios-vue .form-check {
        padding-left: 0;
    } 
</style>

<div id="usuarios-vue">
    <div class="container-fluid py-3">  
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between mb-3">
                    <h4 class="card-title">Usuários</h4>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalNovoUsuario"><i class="fas fa-plus"></i> Cadastrar Usuário</button>
                </div>
               
                <div class="table-responsive mt-2 rounded border">
                    <table class="table-striped mb-0 table">
                        <thead>
                            <tr class="text-nowrap"> 
                                <th>Nome</th>
                                <th>E-mail</th>
                                <th>Telefone</th>
                                <th>Status</th>
                                <th>Limite de Chats</th>
                                <th />
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(usuario, index) in usuarios" :key="usuario.id"> 
                                <td>{{ usuario.nome }}</td>
                                <td>{{ usuario.email }}</td>
                                <td class="text-nowrap">{{ mask_cellphone(usuario.telefone) }}</td>
                                <td>
                                    <label class="custom-switch">
                                        <input type="checkbox" :checked="usuario.ativo == 'S'" disabled>
                                        <span class="slider" aria-disabled="true"></span>
                                    </label> 
                                </td>
                                <td>{{ usuario.limiteChats }}</td>
                                <td class="text-nowrap text-end">
                                    <button class="btn btn-warning text-white" data-toggle="tooltip" data-bs-custom-class="warning" data-placement="top" title="Editar" @@click="toggleEditMode(index)" data-bs-toggle="modal" data-bs-target="#modalNovoUsuario"><i class="fas fa-edit"></i></button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>  

    <!-- Modal para Cadastrar e Editar Usuário -->
    <div class="modal fade" id="modalNovoUsuario" tabindex="-1" aria-labelledby="modalNovoUsuario" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">{{ isEditMode ? 'Editar Usuário' : 'Cadastrar Usuário' }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <form class="row" id="form_adicionar_usuario" @@submit.prevent="saveUser">
                        <div class="col-12 col-sm-6">
                            <label for="userName" class="form-label">Nome</label>
                            <input type="text" class="form-control" id="userName" v-model="userForm.nome">
                        </div>
                        <div class="col-12 col-sm-6">
                            <label for="userEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="userEmail" v-model="userForm.email">
                        </div>
                        <div class="col-12 col-sm-6">
                            <label for="userPhone" class="form-label">Telefone</label>
                            <input type="text" class="form-control input-mask" id="userPhone" data-inputmask="'mask': '(99) 99999-9999'" v-model="userForm.telefone">
                        </div>
                        <div class="col-12 col-sm-6">
                            <label for="userLimit" class="form-label">Limite de Chats</label>
                            <input type="number" class="form-control" id="userLimit" v-model="userForm.limiteChats">
                        </div>
                        <div class="col-12 col-sm-6">
                            <label for="userSenha" class="form-label">Senha</label>
                            <input type="password" class="form-control" id="userSenha" v-model="userForm.senha">
                        </div>
                        <div class="col-12 col-sm-6">
                            <label for="userConfirmarSenha" class="form-label">Confirmar Senha</label>
                            <input type="password" class="form-control" id="userConfirmarSenha" v-model="userForm.confirmarSenha">
                        </div> 
                    </form>
                </div>

                <div class="modal-footer">
                    <div class="form-check form-switch d-flex align-items-center me-auto">
                        <label class="custom-switch">
                            <input type="checkbox" v-model="userForm.ativo" true-value="S" false-value="N">
                            <span class="slider"></span>
                        </label>
                        <span :class="['switch-label', userForm.ativo === 'S' ? 'active' : 'inactive']">
                            {{ userForm.ativo === 'S' ? 'Ativo' : 'Inativo' }}
                        </span>
                    </div>  

                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button> 
                    <button type="submit" form="form_adicionar_usuario" class="btn btn-primary">Salvar</button>
                </div>
            </div>
        </div>
    </div>
</div>
 
<script src="~/assets/libs/inputmask/min/jquery.inputmask.bundle.min.js"></script>

<script>
    new Vue({
        el: '#usuarios-vue',
        data() {
            return {
                usuarios: [], // dados dos usuários
                isEditMode: false,
                userForm: {
                    id: null,
                    nome: '',
                    email: '',
                    telefone: '',
                    limiteChats: 0,
                    ativo: 'S',
                    senha: '',
                    confirmarSenha: '',
                },
                currentUserIndex: null
            };
        },
        mounted() { 
            const modal_usuario = document.getElementById('modalNovoUsuario')
            const out_this = this;

            modal_usuario.addEventListener('hidden.bs.modal', event => { 
                out_this.isEditMode = false;
                out_this.userForm = {
                    id: null,
                    nome: '',
                    email: '',
                    telefone: '',
                    limiteChats: "0",
                    ativo: 'S',
                    senha: '',
                    confirmarSenha: '',
                };
            }) 
        },
        methods: {
            toggleEditMode(id) {
                this.isEditMode = true; 
                    const usuario = this.usuarios[id];
                    this.userForm = {
                        id: usuario.id,
                        nome: usuario.nome,
                        email: usuario.email,
                        telefone: usuario.telefone,
                        limiteChats: usuario.limiteChats,
                        ativo: usuario.ativo,
                        senha: '', // Limpar senha no modo edição
                        confirmarSenha: '' // Limpar confirmar senha no modo edição
                };
                this.currentUserIndex = id; 
            },  
            saveUser() {
                console.log(this.userForm);  
                if (!this.userForm.nome || !this.userForm.email || !this.userForm.telefone || !this.userForm.limiteChats|| !this.userForm.senha || !this.userForm.confirmarSenha) {
                    Swal.fire('Erro', 'Por favor, preencha todos os campos obrigatórios.', 'error');
                    return;
                }

                // Validação de email
                const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                if (!emailRegex.test(this.userForm.email)) {
                    Swal.fire('Erro', 'Por favor, insira um email válido.', 'error');
                    return;
                }

                // Validação do telefone (deve ter pelo menos 10 caracteres)
                if (this.userForm.telefone.length < 10) {
                    Swal.fire('Erro', 'Por favor, insira um número de telefone válido.', 'error');
                    return;
                }

                const senhaTrimmed = this.userForm.senha.trim();
                const confirmarSenhaTrimmed = this.userForm.confirmarSenha.trim();

                // Verifique as senhas no console (depuração)
                console.log('Senha:', senhaTrimmed, 'Confirmar Senha:', confirmarSenhaTrimmed);

                // Validação de senha no modo de cadastro
                if (!this.isEditMode) {
                    if (!senhaTrimmed || !confirmarSenhaTrimmed) {
                        Swal.fire('Erro', 'Por favor, preencha os campos de senha e confirmar senha.', 'error');
                        return;
                    }
                    if (senhaTrimmed !== confirmarSenhaTrimmed) {
                        Swal.fire('Erro', 'As senhas não coincidem.', 'error');
                        return;
                    }
                }

                // Criação do payload
                const payload = { ...this.userForm };

                // No modo de edição, remova os campos de senha e confirmarSenha se eles não forem preenchidos
                if (this.isEditMode && (!senhaTrimmed || !confirmarSenhaTrimmed)) {
                    delete payload.senha;
                    delete payload.confirmarSenha;
                }

                // Se o ID for nulo (modo de cadastro), remova-o do payload
                if (payload.id === null) {
                    delete payload.id;
                }

                if (this.isEditMode) {
                    this.updateUser(payload);
                } else {
                    // Remover confirmarSenha do payload antes de enviar no modo cadastro
                    delete payload.confirmarSenha;
                    this.registerUser(payload);
                }               
            },

            registerUser(user) {
                axios.post('/api/Agent/register', user)
                    .then(response => {
                        const newUser = response.data;
                        this.usuarios.push(newUser);
                        this.loadUsers();
                        $('#modalNovoUsuario').modal('hide');
                        Swal.fire('Sucesso', 'Usuário registrado com sucesso!', 'success');                        
                    })
                    .catch(error => {
                        Swal.fire('Erro', `Erro ao registrar usuário: ${error.response?.data || error.message}`, 'error');
                        console.error('Erro ao registrar usuário', error);
                    });
            },

            updateUser(user) {
                axios.put(`/api/Agent/${user.id}`, user)
                    .then(response => {
                        const updatedUser = response.data;
                        const index = this.usuarios.findIndex(u => u.id === user.id);
                        
                            this.$set(this.usuarios, index, { ...this.usuarios[index], ...updatedUser });
                            this.loadUsers();    
                            Swal.fire('Sucesso', 'Usuário atualizado com sucesso!', 'success');
                    })
                    .catch(error => {
                        Swal.fire('Erro', 'Erro ao atualizar usuário', 'error');
                        console.error('Erro ao atualizar usuário', error);
                    });
            },
           async loadUsers() {
               const u = this;
                await axios.get('/api/Agent/Agent')
                    .then(response => {
                        this.usuarios = response.data.map(usuario => ({
                            ...usuario,
                            ativo: usuario.ativo === 'S' ? 'S' : 'N'  // Converte o campo ativo para 'S' ou 'N'
                        }));
                    })
                    .catch(error => {
                        console.error('Erro ao carregar usuários', error);
                    });
                Inputmask({ 
                    "mask": "(99) 99999-9999", 
                    oncomplete: function (value) { u.userForm.telefone = unmask(value.currentTarget.value) },
                    onincomplete: function (value) { u.userForm.telefone = unmask(value.currentTarget.value) }
                }).mask(document.getElementById('userPhone'));
                 
            },
        },
        created() {
            this.loadUsers();
        }
    });

</script>



