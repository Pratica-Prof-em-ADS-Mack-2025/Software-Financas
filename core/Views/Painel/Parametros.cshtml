<style>
    div#mensagensTable_filter label {
        display: block;
    }

    div#mensagensTable_length label {
        display: grid;
    }

    input.form-control.form-control-sm {
        width: 100% !important;
        display: block;
    }

    table#mensagensTable {
        margin: 30px auto;
    }

    select.custom-select.custom-select-sm.form-control.form-control-sm {
        grid-row: 2;
        max-width: 200px;
    }

    @@media(max-width:900px) {
        .td_area {
            overflow-x: auto !important;
        }
    }
</style>


<div id="app-vue">
    <div class="container-fluid py-3">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between mb-3">
                    <h4 class="card-title">Parâmetros</h4>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalNovoParametro"><i class="fas fa-plus"></i> Adicionar Parâmetro</button>
                </div>

                <div class="table-responsive rounded border">
                    <table class="table-striped mb-0 table">
                        <thead>
                            <tr>
                                <th>Categoria</th>
                                <th>Subcategoria</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(parametro, index) in parametros" :key="index">
                                <td>{{ parametro.tipo }}</td>
                                <td>{{ parametro.sub_Tipo }}</td>
                                <td class="text-nowrap text-end">
                                    <button type="button" class="btn btn-warning text-white"
                                            data-bs-toggle="modal"
                                            data-toggle="tooltip"
                                            data-placement="top" 
                                            title="Editar"
                                            data-bs-target="#modalNovoParametro"
                                            @@click="toggleEditMode(index)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" 
                                            class="btn btn-danger"
                                            data-toggle="tooltip"
                                            data-placement="top"
                                            title="Excluir"
                                            @@click="excluirParametro(index)">
                                        <i class="fas fa-times-circle"></i>
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" tabindex="-1" id="modalNovoParametro">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">{{ isEditMode ? 'Editar Parâmetro' : 'Adicionar Parâmetro' }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>

                <div class="modal-body">
                    <form @@submit.prevent="salvarParametro">
                        <div class="row g-3 align-items-end">
                            <div class="col-md-2">
                                <label for="categoria" class="form-label">Categoria</label>
                                <select class="form-select" id="categoria" v-model="formParametro.Categoria">
                                    <option value="">Selecione</option>
                                    <option value="Investimento">Investimento</option>
                                    <option value="Gasto">Gasto</option>
                                    <option value="Renda">Renda</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="subcategoria" class="form-label">Subcategoria</label>
                                <input type="text"
                                       class="form-control"
                                       id="subcategoria"
                                       v-model="formParametro.Subcategoria"
                                       placeholder="Digite a subcategoria" />
                            </div>
                        </div>

                        <div class="modal-footer mt-4">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                            <button type="submit" class="btn btn-primary">Salvar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    new Vue({
        el: '#app-vue',
        data: {
            parametros: [],
            formParametro: {
                Id: null,
                Categoria: '',
                Subcategoria: ''
            },
            isEditMode: false,
            editIndex: -1
        },
        methods: {
            async listarParametros() {
                try {
                    const response = await fetch('/api/parametro/obter');
                    if (response.ok) {
                        const data = await response.json();
                        this.parametros = data;
                    } else {
                        this.showAlert('Erro ao buscar parâmetros');
                    }
                } catch (error) {
                    console.error('Erro ao buscar parâmetros:', error);
                    this.showAlert('Erro inesperado ao buscar parâmetros');
                }
            },
            toggleEditMode(index) {
                this.isEditMode = true;
                this.editIndex = index;
                const parametro = this.parametros[index];

                this.formParametro = {
                    Id: parametro.id,
                    Categoria: parametro.tipo,
                    Subcategoria: parametro.sub_Tipo
                };
            },
            novoParametro() {
                this.isEditMode = false;
                this.formParametro = {
                    Id: null,
                    Categoria: '',
                    Subcategoria: ''
                };
            },
            async salvarParametro() {
                if (!this.formParametro.Categoria || !this.formParametro.Subcategoria) {
                    this.showAlert('Preencha todos os campos obrigatórios.');
                    return;
                }

                try {
                    const response = await fetch('/api/parametro/salvar', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(this.formParametro)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        await this.listarParametros();

                        const modal = bootstrap.Modal.getInstance(document.getElementById('modalNovoParametro'));
                        modal.hide();

                        this.showAlert(result.message || 'Parâmetro salvo com sucesso.', 'success');
                    } else {
                        const err = await response.json();
                        this.showAlert(err.message || 'Erro ao salvar parâmetro', 'error');
                    }
                } catch (error) {
                    console.error('Erro ao salvar:', error);
                    this.showAlert('Erro inesperado ao salvar parâmetro', 'error');
                }
            },
            async excluirParametro(index) {
                const parametro = this.parametros[index];

                const confirm = await Swal.fire({
                    title: 'Confirmar exclusão',
                    text: 'Você tem certeza que deseja excluir este parâmetro?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Sim, excluir',
                    cancelButtonText: 'Cancelar'
                });

                if (!confirm.isConfirmed) return;

                try {
                    const response = await fetch(`/api/parametro/excluir/${parametro.id}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        const result = await response.json();
                        this.showAlert(result.message || 'Parâmetro excluído com sucesso.', 'success');
                        this.listarParametros();
                    } else {
                        const err = await response.json();
                        this.showAlert(err.message || 'Erro ao excluir parâmetro', 'error');
                    }
                } catch (error) {
                    console.error('Erro ao excluir:', error);
                    this.showAlert('Erro inesperado ao excluir parâmetro', 'error');
                }
            },
            showAlert(message, icon = 'warning') {
                Swal.fire({
                    title: 'Aviso',
                    text: message,
                    icon: icon,
                    confirmButtonText: 'OK'
                });
            }
        },        
        mounted() {
            this.listarParametros();

            const modalEl = document.getElementById('modalNovoParametro');
            modalEl.addEventListener('show.bs.modal', () => {
                if (!this.isEditMode) this.novoParametro();
            });

            modalEl.addEventListener('hidden.bs.modal', () => {
                this.isEditMode = false;
                this.formParametro = {
                    Id: null,
                    Categoria: '',
                    Subcategoria: ''
                };
            });
        }
    });
</script>
